var PerspectiveMatrix = function() {
        function t() {}
        return t.perspectiveFieldOfViewLH = function(t, e, i, o) {
            var r = 1 / Math.tan(t / 2),
                n = r / e;
            return new Float32Array([n, 0, 0, 0, 0, r, 0, 0, 0, 0, o / (o - i), 1, 0, 0, i * o / (i - o), 0])
        }, t.perspectiveFieldOfViewRH = function(t, e, i, o) {
            var r = 1 / Math.tan(t / 2),
                n = r / e;
            return new Float32Array([n, 0, 0, 0, 0, r, 0, 0, 0, 0, o / (i - o), -1, 0, 0, i * o / (i - o), 0])
        }, t
    }(),
    Controller = function() {
        function t() {
            var e = this;
            if (this.factorXY = .1, this.factorZ = .1, this.currentX = 0, this.currentY = 0, this.currentZ = 0, this.deltaZ = .1, this._targetX = 0, this._targetY = 0, this._targetZ = 0, this._onMouseMove = function(t) {
                    e._targetX = 2 * (t.pageX / e._width - .5), e._targetY = 2 * (t.pageY / e._height - .5), e._rate > 1 ? e._targetY /= e._rate : e._targetX *= e._rate, e._isRAFMove || (window.requestAnimationFrame(e._onRAFMove), e._isRAFMove = !0)
                }, this._onRAFMove = function() {
                    var t, i, o, r;
                    t = e._targetX - e.currentX, i = e._targetY - e.currentY, o = Math.abs(t), r = Math.abs(i), 5e-4 > o && 5e-4 > r ? (e.currentX = e._targetX, e.currentY = e._targetY, e._isRAFMove = !1) : (e.currentX += t * e.factorXY, e.currentY += i * e.factorXY, window.requestAnimationFrame(e._onRAFMove))
                }, this._onMouseWheel = function(t, i) {
                    e._targetZ += e.deltaZ * (i > 0 ? -1 : 1), e._onZ()
                }, this._onKeyDown = function(t) {
                    switch (t.which) {
                        case 40:
                            e._targetZ += -e.deltaZ;
                            break;
                        case 38:
                            e._targetZ += e.deltaZ
                    }
                    e._onZ()
                }, this._onRAFWheel = function() {
                    var t, i;
                    t = e._targetZ - e.currentZ, i = Math.abs(t), 5e-4 > i ? (e.currentZ = e._targetZ, e._isRAFWheel = !1) : (e.currentZ += t * e.factorZ, window.requestAnimationFrame(e._onRAFWheel)), console.log(e.currentZ)
                }, this._onResize = function() {
                    e._width = e._$window.width(), e._height = e._$window.height(), e._rate = e._width / e._height
                }, t._instance) throw new Error("This class is singleton...");
            t._instance = this
        }
        return t.prototype.start = function(t, e, i) {
            var o = this;
            void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === i && (i = 0), this._$window || (this._$window = $(window)), this._targetX = t, this._targetY = e, this._targetZ = i, this._$window.on("resize", this._onResize).on("mousemove", this._onMouseMove).on("mousewheel", this._onMouseWheel).on("keydown", this._onKeyDown), this._onResize(), this._$dummy || (this._$dummy = $('<input id="dummy" type="text" name="dummy" value="">').css({
                opacity: 0,
                position: "absolute",
                "z-index": "-1"
            }).prependTo("body")), this._interval && clearInterval(this._interval), this._interval = setInterval(function() {
                o._$dummy.focus()
            }, 500)
        }, t.prototype.stop = function() {
            this._$window.off("resize", this._onResize).off("mousemove", this._onMouseMove).off("mousewheel", this._onMouseWheel)
        }, t.prototype._onZ = function() {
            this._targetZ < 0 && (this._targetZ = 0), this._targetZ > 1 && (this._targetZ = 1), this._isRAFWheel || (window.requestAnimationFrame(this._onRAFWheel), this._isRAFWheel = !0)
        }, Object.defineProperty(t, "instance", {
            get: function() {
                return t._instance || (t._instance = new t), t._instance
            },
            enumerable: !0,
            configurable: !0
        }), t
    }(),
    geom;
! function(t) {
    var e = function() {
        function t(t, e) {
            void 0 === t && (t = 0), void 0 === e && (e = 0), this.x = 0, this.y = 0, this.x = t, this.y = e
        }
        return t.prototype.copy = function() {
            return new t(this.x, this.y)
        }, t.prototype.equals = function(t) {
            return this.x == t.x && this.y == t.y
        }, t.prototype.setSelf = function(t, e) {
            return this.x = t, this.y = e, this
        }, t.prototype.resetSelf = function() {
            return this.x = 0, this.y = 0, this
        }, t.prototype.add = function(e) {
            return new t(this.x + e.x, this.y + e.y)
        }, t.prototype.addSelf = function(t) {
            return this.x += t.x, this.y += t.y, this
        }, t.prototype.subtract = function(e) {
            return new t(this.x - e.x, this.y - e.y)
        }, t.prototype.subtractSelf = function(t) {
            return this.x -= t.x, this.y -= t.y, this
        }, t.prototype.multiply = function(e) {
            return new t(this.x * e, this.y * e)
        }, t.prototype.multiplySelf = function(t) {
            return this.x *= t, this.y *= t, this
        }, t.prototype.divide = function(e) {
            return new t(this.x / e, this.y / e)
        }, t.prototype.divideSelf = function(t) {
            return this.x /= t, this.y /= t, this
        }, t.prototype.getLength = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y)
        }, t.prototype.getLengthSQ = function() {
            return this.x * this.x + this.y * this.y
        }, t.prototype.setLength = function(e) {
            var i;
            return i = this.getRadian(), new t(Math.cos(i) * e, Math.sin(i) * e)
        }, t.prototype.setLengthSelf = function(t) {
            var e;
            return e = this.getRadian(), this.x = Math.cos(e) * t, this.y = Math.sin(e) * t, this
        }, t.prototype.getRadian = function() {
            return Math.atan2(this.y, this.x)
        }, t.prototype.setRadian = function(e) {
            var i;
            return i = this.getLength(), new t(Math.cos(e) * i, Math.sin(e) * i)
        }, t.prototype.setRadianSelf = function(t) {
            var e;
            return e = this.getLength(), this.x = Math.cos(t) * e, this.y = Math.sin(t) * e, this
        }, t.prototype.normalize = function() {
            var e;
            return e = this.getLength(), 0 == e ? new t(1, 0) : this.divide(e)
        }, t.prototype.normalizeSelf = function() {
            var t;
            return t = this.getLength(), 0 == t ? this.setSelf(1, 0) : this.divideSelf(t)
        }, t.prototype.max = function(t) {
            return t * t < this.getLengthSQ() ? this.setLength(t) : this.copy()
        }, t.prototype.maxSelf = function(t) {
            return t * t < this.getLengthSQ() ? this.setLengthSelf(t) : this
        }, t.prototype.min = function(t) {
            return t * t > this.getLengthSQ() ? this.setLength(t) : this.copy()
        }, t.prototype.minSelf = function(t) {
            return t * t > this.getLengthSQ() ? this.setLengthSelf(t) : this
        }, t.prototype.clamp = function(t, e) {
            var i;
            return i = this.getLengthSQ(), t * t > i ? this.setLength(t) : i > e * e ? this.setLength(e) : this.copy()
        }, t.prototype.clampSelf = function(t, e) {
            var i;
            return i = this.getLengthSQ(), t * t > i ? this.setLengthSelf(t) : i > e * e ? this.setLengthSelf(e) : this
        }, t.prototype.getDistance = function(t) {
            return t.subtract(this).getLength()
        }, t.prototype.getDistanceSQ = function(t) {
            return t.subtract(this).getLengthSQ()
        }, t.prototype.dot = function(t) {
            return this.x * t.x + this.y * t.y
        }, t.prototype.cross = function(t) {
            return this.x * t.y - this.y * t.x
        }, t
    }();
    t.Vector2D = e
}(geom || (geom = {}));
var Context = wgl.Context,
    Program = wgl.Program,
    VertexBuffer = wgl.VertexBuffer,
    IndexBuffer = wgl.IndexBuffer,
    Texture = wgl.Texture,
    Uniform = wgl.Uniform,
    WGLMath = wgl.utils.WGLMath,
    Main = function() {
        function t() {
            var e = this;
            this._mouseX = 0, this._mouseY = 0, this._mouseDown = 0, this._isDirect = !0, this._onLoad = function() {
                document.getElementById("over").volume = .2, document.getElementById("click").volume = .3, e._$button = $("#navi button"), e._setData(), e._initWebGL(), $("#wgl").fadeIn(300), $("#navi").fadeIn(300), e._isDirect && $("h1").fadeIn(300), $("#startup").fadeOut(100), e._onResize(), $(window).resize(e._onResize).mousemove(e._onMouseMove).mousedown(e._onMouseDown).mouseup(e._onMouseUp).keydown(e._onKeydown), $("h1 a,#chromeexperiments a").click(e._onClickTitle).mouseenter(e._onMouseEnterTitle), e._$button.click(e._onClickButton).mouseenter(e._onMouseEnterButton), e._setup(), e._update(), e._initGUI()
            }, this._update = function() {
                window.requestAnimationFrame(e._update), e._back = e._front, e._front = 3 - e._front, e._calc(), e._draw()
            }, this._objParticles = {
                num: t._num.toString(),
                numLevel: 9
            }, this._obj = [
                [{
                    max: 50,
                    reduce: .85
                }, {
                    hold: !1,
                    propToDist: "compute",
                    radius: 1e3,
                    strength: .04,
                    variable: .75
                }, {
                    rotation: 45,
                    bothSides: !0,
                    variable: .75
                }],
                [{
                    max: 50,
                    reduce: .85
                }, {
                    hold: !1,
                    propToDist: "inverse",
                    radius: 750,
                    strength: .06,
                    variable: .5
                }, {
                    rotation: 60,
                    bothSides: !1,
                    variable: .25
                }],
                [{
                    max: 5,
                    reduce: .95
                }, {
                    hold: !1,
                    propToDist: "compute",
                    radius: 1500,
                    strength: .2,
                    variable: .01
                }, {
                    rotation: 5,
                    bothSides: !0,
                    variable: .5
                }],
                [{
                    max: 100,
                    reduce: .95
                }, {
                    hold: !0,
                    propToDist: "compute",
                    radius: 1500,
                    strength: .03,
                    variable: .01
                }, {
                    rotation: 25,
                    bothSides: !0,
                    variable: .9
                }],
                [{
                    max: 100,
                    reduce: .1
                }, {
                    hold: !0,
                    propToDist: "none",
                    radius: 1500,
                    strength: .2,
                    variable: .9
                }, {
                    rotation: 90,
                    bothSides: !0,
                    variable: .01
                }],
                [{
                    max: 5,
                    reduce: .95
                }, {
                    hold: !0,
                    propToDist: "inverse",
                    radius: 750,
                    strength: .01,
                    variable: .01
                }, {
                    rotation: 45,
                    bothSides: !0,
                    variable: .01
                }],
                [{
                    max: 5,
                    reduce: .95
                }, {
                    hold: !0,
                    propToDist: "none",
                    radius: 1500,
                    strength: .01,
                    variable: .9
                }, {
                    rotation: 5,
                    bothSides: !0,
                    variable: .9
                }],
                [{
                    max: 5,
                    reduce: .3
                }, {
                    hold: !0,
                    propToDist: "inverse",
                    radius: 900,
                    strength: .2,
                    variable: .9
                }, {
                    rotation: 10,
                    bothSides: !0,
                    variable: .5
                }],
                [{
                    max: 10,
                    reduce: .2
                }, {
                    hold: !0,
                    propToDist: "none",
                    radius: 100,
                    strength: .2,
                    variable: .01
                }, {
                    rotation: 0,
                    bothSides: !1,
                    variable: .01
                }]
            ], this._objSpeed = {}, this._objArea = {}, this._objScrew = {}, this._index = 0, this._setData = function() {
                e._$button.removeClass("active"), e._$button.eq(e._index).addClass("active"), $.extend(e._objSpeed, e._obj[e._index][0]), $.extend(e._objArea, e._obj[e._index][1]), $.extend(e._objScrew, e._obj[e._index][2])
            }, this._onClickButton = function(t) {
                document.getElementById("click").play(), e._index = e._$button.index(t.currentTarget), e._setData()
            }, this._onMouseEnterButton = function() {
                document.getElementById("over").play()
            }, this._onResize = function() {
                var t, i;
                t = $(window).width(), i = $(window).height(), e._context.setCanvasSize(t, i), e._canvasWidth = t, e._canvasHeight = i, e._canvasRate = t / i
            }, this._onMouseMove = function(t) {
                e._mouseX = t.clientX - $(window).width() / 2, e._mouseY = -(t.clientY - $(window).height() / 2)
            }, this._onMouseDown = function() {
                e._mouseDown = 1
            }, this._onMouseUp = function() {
                e._mouseDown = 0
            }, this._onMouseEnterTitle = function() {
                document.getElementById("over").play()
            }, this._onClickTitle = function() {
                document.getElementById("click").play()
            }, this._onKeydown = function(t) {
                switch (t.keyCode) {
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                        var i = t.keyCode - 49;
                        i < e._obj.length && (e._index = i, e._setData())
                }
            }, this._context = new Context(document.getElementById("wgl")), console.log("wgl.context.isSupported: " + this._context.isSupported), console.log("wgl.context.isSupportedTextureFloat: " + this._context.isSupportedTextureFloat), this._isDirect = -1 == window.location.href.indexOf("?iframe")
        }
        return t.prototype.init = function() {
            $("h1").hide(), $("#wgl").hide(), $("#navi").hide(), $("#container").show(), this._context.isSupported && this._context.isSupportedTextureFloat && ($("#not_supported").hide(), this._onLoad())
        }, t.prototype._initWebGL = function() {
            this._canvasRate = 1, this._front = 1, this._back = 2, this._program = this._context.createProgram(), this._program.addVertexShaderScript("vs_common"), this._program.addVertexShaderScript("vs_draw"), this._program.addFragmentShaderScript("fs_setup"), this._program.addFragmentShaderScript("fs_calc"), this._program.addFragmentShaderScript("fs_draw"), this._program.addFragmentShaderScript("fs_view"), this._program.addProgram("setup", "vs_common", "fs_setup"), this._program.addProgram("calc", "vs_common", "fs_calc"), this._program.addProgram("draw", "vs_draw", "fs_draw"), this._program.addProgram("view", "vs_common", "fs_view"), this._uniform = this._context.createUniform(), this._vertexBuffer = this._context.createVertexBuffer(), this._initVertex(), this._indexBuffer = this._context.createIndexBuffer(), this._indexBuffer.add("index", t._INDEX_LIST_CALC, this._context.STATIC_DRAW), this._indexBuffer.bind("index"), this._texture = this._context.createTexture(), this._frameBuffer = this._context.createFrameBuffer(), this._initTexture()
        }, t.prototype._initVertex = function() {
            var e, i, o;
            for (o = t._num, this._vertexList = new Float32Array(t._ATTR_NUN * o), e = 0; o > e; e++) i = e * t._ATTR_NUN, this._vertexList[i + 0] = e, this._vertexList[i + 1] = .8 * Math.random() + .2, this._vertexList[i + 2] = .8 * Math.random() + .2, this._vertexList[i + 3] = .8 * Math.random() + .2;
            this._vertexBuffer.add("vertexDraw", this._vertexList, this._context.STATIC_DRAW), this._vertexBuffer.add("vertexCalc", t._VERTEX_LIST_CALC, this._context.STATIC_DRAW)
        }, t.prototype._setVertexCommon = function() {
            this._vertexBuffer.setAttribPointer("vertexCalc", this._program.getAttribLocation("aPosition"), 2, this._context.FLOAT, !1, 16, 0), this._vertexBuffer.setAttribPointer("vertexCalc", this._program.getAttribLocation("aUv"), 2, this._context.FLOAT, !1, 16, 8)
        }, t.prototype._setVertexDraw = function() {
            this._vertexBuffer.setAttribPointer("vertexDraw", this._program.getAttribLocation("aIndex"), 1, this._context.FLOAT, !1, 4 * t._ATTR_NUN, 0), this._vertexBuffer.setAttribPointer("vertexDraw", this._program.getAttribLocation("aColor"), 3, this._context.FLOAT, !1, 4 * t._ATTR_NUN, 4)
        }, t.prototype._initTexture = function() {
            this._texture.create2D("calc1", t._size, t._size, !0), this._texture.create2D("calc2", t._size, t._size, !0), this._frameBuffer.add("calc1", this._texture.get2D("calc1")), this._frameBuffer.add("calc2", this._texture.get2D("calc2"))
        }, t.prototype._setUniformSetup = function() {
            this._uniform.setFloat(this._program.getUniformLocation("canvasSize"), this._canvasWidth / 2, this._canvasHeight / 2), this._uniform.setFloat(this._program.getUniformLocation("ran"), Math.random()), this._uniform.setFloat(this._program.getUniformLocation("size"), t._size)
        }, t.prototype._setUniformCalc = function() {
            this._uniform.setFloat(this._program.getUniformLocation("ran"), Math.random()), this._uniform.setFloat(this._program.getUniformLocation("canvasSize"), this._canvasWidth / 2, this._canvasHeight / 2), this._uniform.setFloat(this._program.getUniformLocation("mouse"), this._mouseX, this._mouseY), this._uniform.setInt(this._program.getUniformLocation("mouseDown"), this._objArea.hold || this._mouseDown), this._uniform.setFloat(this._program.getUniformLocation("maxSpeed"), this._objSpeed.max), this._uniform.setFloat(this._program.getUniformLocation("reduceSpeed"), this._objSpeed.reduce), this._uniform.setInt(this._program.getUniformLocation("isProp"), "none" != this._objArea.propToDist ? 1 : 0), this._uniform.setInt(this._program.getUniformLocation("isInverse"), "inverse" == this._objArea.propToDist ? 1 : 0), this._uniform.setFloat(this._program.getUniformLocation("radius"), this._objArea.radius), this._uniform.setFloat(this._program.getUniformLocation("strength"), this._objArea.strength), this._uniform.setFloat(this._program.getUniformLocation("areaVariable"), this._objArea.variable), this._uniform.setFloat(this._program.getUniformLocation("screw"), this._objScrew.rotation * t._DEGREES_TO_RADIANS), this._uniform.setInt(this._program.getUniformLocation("bothSides"), this._objScrew.bothSides ? 1 : 0), this._uniform.setFloat(this._program.getUniformLocation("screwVariable"), this._objScrew.variable), this._texture.uniformTexture2D("calc" + this._back, 0, this._program.getUniformLocation("texture")), this._texture.bind("calc" + this._back)
        }, t.prototype._setUniformDraw = function() {
            this._uniform.setFloat(this._program.getUniformLocation("canvasSize"), this._canvasWidth / 2, this._canvasHeight / 2), this._uniform.setFloat(this._program.getUniformLocation("size"), t._size), this._texture.uniformTexture2D("calc" + this._front, 0, this._program.getUniformLocation("texture")), this._texture.bind("calc" + this._front)
        }, t.prototype._setup = function() {
            this._context.blendMode(!1), this._frameBuffer.bind("calc" + this._front), this._context.setWebGLViewport(0, 0, t._size, t._size), this._program.useProgram("setup"), this._setUniformSetup(), this._setVertexCommon(), this._context.clearColorBuffer(0, 0), this._context.context.drawElements(this._context.context.TRIANGLES, 6, this._context.UNSIGNED_SHORT, 0), this._context.context.flush()
        }, t.prototype._calc = function() {
            this._context.blendMode(!1), this._frameBuffer.bind("calc" + this._front), this._context.setWebGLViewport(0, 0, t._size, t._size), this._program.useProgram("calc"), this._setUniformCalc(), this._setVertexCommon(), this._context.clearColorBuffer(0, 0), this._context.context.drawElements(this._context.context.TRIANGLES, 6, this._context.UNSIGNED_SHORT, 0), this._context.context.flush()
        }, t.prototype._draw = function() {
            this._context.blendMode(!0), this._context.blendAdd(), this._frameBuffer.unbind(), this._context.setWebGLViewport(0, 0, this._canvasWidth, this._canvasHeight), this._program.useProgram("draw"), this._setUniformDraw(), this._setVertexDraw(), this._context.clearColorBuffer(0, 0), this._context.context.drawArrays(this._context.context.POINTS, 0, t._num), this._context.context.flush()
        }, t.prototype._initGUI = function() {
            var e = this,
                i = this._gui = new dat.GUI,
                o = i.addFolder("Particles"),
                r = $(o.add(this._objParticles, "num").listen().domElement);
            r.find("input").attr({
                readonly: !0
            }).css({
                fontSize: 24
            }), r.parents("li.cr").css({
                height: 36,
                lineHeight: "36px"
            }), o.add(this._objParticles, "numLevel", 8, 10).step(1).listen().onFinishChange(function(i) {
                t._size = Math.pow(2, i), t._num = t._size * t._size, e._front = 1, e._back = 2, e._initVertex(), e._initTexture(), e._setup(), e._objParticles.num = t._num.toString()
            }), o.open();
            var n = i.addFolder("speed");
            n.add(this._objSpeed, "max", 5, 100).step(1).listen(), n.add(this._objSpeed, "reduce", .1, .95).step(.01).listen();
            var s = i.addFolder("mouse");
            s.add(this._objArea, "hold").listen();
            var a = s.addFolder("area");
            a.add(this._objArea, "propToDist", ["none", "compute", "inverse"]).listen(), a.add(this._objArea, "radius", 50, 1500).step(1).listen(), a.add(this._objArea, "strength", .01, .2).step(.01).listen(), a.add(this._objArea, "variable", .01, .9).step(.01).listen(), a.open();
            var h = s.addFolder("screw");
            h.add(this._objScrew, "rotation", -90, 90).step(1).listen(), h.add(this._objScrew, "bothSides").listen(), h.add(this._objScrew, "variable", .01, .9).step(.01).listen(), h.open()
        }, t._VERTEX_LIST_CALC = new Float32Array([-1, 1, 0, 0, 1, 1, 1, 0, -1, -1, 0, 1, 1, -1, 1, 1]), t._INDEX_LIST_CALC = new Uint16Array([0, 1, 2, 2, 1, 3]), t._size = 512, t._num = t._size * t._size, t._DEGREES_TO_RADIANS = Math.PI / 180, t._ATTR_NUN = 4, t
    }();
$(document).ready(function() {
    var t = new Main;
    t.init()
});
